/* * Copyright 2001-2003 Neil Rotstan * * This file is part of JGAP. * * JGAP is free software; you can redistribute it and/or modify * it under the terms of the GNU Lesser Public License as published by * the Free Software Foundation; either version 2.1 of the License, or * (at your option) any later version. * * JGAP is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the * GNU Lesser Public License for more details. * * You should have received a copy of the GNU Lesser Public License * along with JGAP; if not, write to the Free Software Foundation, Inc., * 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA */package examples;import org.jgap.FitnessFunction;import org.jgap.Chromosome;/** * Sample fitness function for the MakeChange example. */class MinimizingMakeChangeFitnessFunction extends FitnessFunction{    private final int m_targetAmount;    public MinimizingMakeChangeFitnessFunction( int a_targetAmount )    {        if( a_targetAmount < 1 || a_targetAmount > 99 )        {            throw new IllegalArgumentException(                "Change amount must be between 1 and 99 cents." );        }        m_targetAmount = a_targetAmount;    }    /**     * Determine the fitness of the given Chromosome instance. The higher the     * return value, the more fit the instance. This method should always     * return the same fitness value for two equivalent Chromosome instances.     *     * @param a_subject: The Chromosome instance to evaluate.     *     * @return The fitness rating of the given Chromosome.     */    public int evaluate( Chromosome a_subject )    {        int changeAmount = amountOfChange( a_subject );        int totalCoins = getTotalNumberOfCoins( a_subject );        int changeDifference = Math.abs( m_targetAmount - changeAmount );        int fitness = (100 - changeDifference);        // Bias towards the correct change amount by penalizing an additional        // 10 fitness points if the amount is incorrect.        // ------------------------------------------------------------------        if( changeAmount == m_targetAmount )        {            fitness += 100 - (10 * totalCoins);        }        // Make sure we return a fitness value >= 1.        // -----------------------------------------        return Math.max( 1, fitness );    }    /**     * Calculates the total amount of change (in cents) represented by     * the given potential solution and returns that amount.     *     * @param a_potentialSolution The pontential solution to evaluate.     * @return The total amount of change (in cents) represented by the     *         given solution.     */    public static int amountOfChange( Chromosome a_potentialSolution )    {        int numQuarters = getNumberOfCoins( a_potentialSolution, 0 );        int numDimes = getNumberOfCoins( a_potentialSolution, 1 );        int numNickels = getNumberOfCoins( a_potentialSolution, 2 );        int numPennies = getNumberOfCoins( a_potentialSolution, 3 );        return ( numQuarters * 25 ) + ( numDimes * 10 ) + ( numNickels * 5 ) +               numPennies;    }    /**     * Retrieves the number of coins represented by the given potential     * solution at the given gene position.     *     * @param a_potentialSolution The potential solution to evaluate.     * @param a_position The gene position to evaluate.     * @return the number of coins represented by the potential solution     *         at the given gene position.     */    public static int getNumberOfCoins( Chromosome a_potentialSolution,                                        int a_position )    {        Integer numCoins =          (Integer) a_potentialSolution.getGene( a_position ).getAllele();        return numCoins.intValue();    }    /**     * Returns the total number of coins represented by all of the genes in     * the given potential solution.     *     * @param a_potentialsolution The potential solution to evaluate.     * @return The total number of coins represented by the given Chromosome.     */    public static int getTotalNumberOfCoins( Chromosome a_potentialsolution )    {        int totalCoins = 0;        int numberOfGenes = a_potentialsolution.size();        for( int i = 0; i < numberOfGenes; i++ )        {            totalCoins += getNumberOfCoins( a_potentialsolution, i );        }        return totalCoins;    }}